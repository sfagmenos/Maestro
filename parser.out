Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> E
Rule 1     E -> ID LP LII RP
Rule 2     E -> ID ASSIGN E
Rule 3     E -> STR
Rule 4     LII -> LII COMMA E
Rule 5     LII -> E
Rule 6     E -> E NODEP E
Rule 7     E -> E DEP E
Rule 8     E -> LP E RP
Rule 9     E -> ID

Terminals, with rules where they appear

ASSIGN               : 2
COMMA                : 4
DEP                  : 7
ID                   : 1 2 9
LP                   : 1 8
NODEP                : 6
RP                   : 1 8
STR                  : 3
error                : 

Nonterminals, with rules where they appear

E                    : 2 4 5 6 6 7 7 8 0
LII                  : 1 4

Parsing method: LALR

state 0

    (0) S' -> . E
    (1) E -> . ID LP LII RP
    (2) E -> . ID ASSIGN E
    (3) E -> . STR
    (6) E -> . E NODEP E
    (7) E -> . E DEP E
    (8) E -> . LP E RP
    (9) E -> . ID

    ID              shift and go to state 2
    STR             shift and go to state 1
    LP              shift and go to state 3

    E                              shift and go to state 4

state 1

    (3) E -> STR .

    NODEP           reduce using rule 3 (E -> STR .)
    DEP             reduce using rule 3 (E -> STR .)
    $end            reduce using rule 3 (E -> STR .)
    RP              reduce using rule 3 (E -> STR .)
    COMMA           reduce using rule 3 (E -> STR .)


state 2

    (1) E -> ID . LP LII RP
    (2) E -> ID . ASSIGN E
    (9) E -> ID .

    LP              shift and go to state 5
    ASSIGN          shift and go to state 6
    NODEP           reduce using rule 9 (E -> ID .)
    DEP             reduce using rule 9 (E -> ID .)
    $end            reduce using rule 9 (E -> ID .)
    RP              reduce using rule 9 (E -> ID .)
    COMMA           reduce using rule 9 (E -> ID .)


state 3

    (8) E -> LP . E RP
    (1) E -> . ID LP LII RP
    (2) E -> . ID ASSIGN E
    (3) E -> . STR
    (6) E -> . E NODEP E
    (7) E -> . E DEP E
    (8) E -> . LP E RP
    (9) E -> . ID

    ID              shift and go to state 2
    STR             shift and go to state 1
    LP              shift and go to state 3

    E                              shift and go to state 7

state 4

    (0) S' -> E .
    (6) E -> E . NODEP E
    (7) E -> E . DEP E

    NODEP           shift and go to state 9
    DEP             shift and go to state 8


state 5

    (1) E -> ID LP . LII RP
    (4) LII -> . LII COMMA E
    (5) LII -> . E
    (1) E -> . ID LP LII RP
    (2) E -> . ID ASSIGN E
    (3) E -> . STR
    (6) E -> . E NODEP E
    (7) E -> . E DEP E
    (8) E -> . LP E RP
    (9) E -> . ID

    ID              shift and go to state 2
    STR             shift and go to state 1
    LP              shift and go to state 3

    E                              shift and go to state 10
    LII                            shift and go to state 11

state 6

    (2) E -> ID ASSIGN . E
    (1) E -> . ID LP LII RP
    (2) E -> . ID ASSIGN E
    (3) E -> . STR
    (6) E -> . E NODEP E
    (7) E -> . E DEP E
    (8) E -> . LP E RP
    (9) E -> . ID

    ID              shift and go to state 2
    STR             shift and go to state 1
    LP              shift and go to state 3

    E                              shift and go to state 12

state 7

    (8) E -> LP E . RP
    (6) E -> E . NODEP E
    (7) E -> E . DEP E

    RP              shift and go to state 13
    NODEP           shift and go to state 9
    DEP             shift and go to state 8


state 8

    (7) E -> E DEP . E
    (1) E -> . ID LP LII RP
    (2) E -> . ID ASSIGN E
    (3) E -> . STR
    (6) E -> . E NODEP E
    (7) E -> . E DEP E
    (8) E -> . LP E RP
    (9) E -> . ID

    ID              shift and go to state 2
    STR             shift and go to state 1
    LP              shift and go to state 3

    E                              shift and go to state 14

state 9

    (6) E -> E NODEP . E
    (1) E -> . ID LP LII RP
    (2) E -> . ID ASSIGN E
    (3) E -> . STR
    (6) E -> . E NODEP E
    (7) E -> . E DEP E
    (8) E -> . LP E RP
    (9) E -> . ID

    ID              shift and go to state 2
    STR             shift and go to state 1
    LP              shift and go to state 3

    E                              shift and go to state 15

state 10

    (5) LII -> E .
    (6) E -> E . NODEP E
    (7) E -> E . DEP E

    RP              reduce using rule 5 (LII -> E .)
    COMMA           reduce using rule 5 (LII -> E .)
    NODEP           shift and go to state 9
    DEP             shift and go to state 8


state 11

    (1) E -> ID LP LII . RP
    (4) LII -> LII . COMMA E

    RP              shift and go to state 17
    COMMA           shift and go to state 16


state 12

    (2) E -> ID ASSIGN E .
    (6) E -> E . NODEP E
    (7) E -> E . DEP E

    $end            reduce using rule 2 (E -> ID ASSIGN E .)
    RP              reduce using rule 2 (E -> ID ASSIGN E .)
    COMMA           reduce using rule 2 (E -> ID ASSIGN E .)
    NODEP           shift and go to state 9
    DEP             shift and go to state 8

  ! NODEP           [ reduce using rule 2 (E -> ID ASSIGN E .) ]
  ! DEP             [ reduce using rule 2 (E -> ID ASSIGN E .) ]


state 13

    (8) E -> LP E RP .

    NODEP           reduce using rule 8 (E -> LP E RP .)
    DEP             reduce using rule 8 (E -> LP E RP .)
    $end            reduce using rule 8 (E -> LP E RP .)
    RP              reduce using rule 8 (E -> LP E RP .)
    COMMA           reduce using rule 8 (E -> LP E RP .)


state 14

    (7) E -> E DEP E .
    (6) E -> E . NODEP E
    (7) E -> E . DEP E

    DEP             reduce using rule 7 (E -> E DEP E .)
    $end            reduce using rule 7 (E -> E DEP E .)
    RP              reduce using rule 7 (E -> E DEP E .)
    COMMA           reduce using rule 7 (E -> E DEP E .)
    NODEP           shift and go to state 9

  ! NODEP           [ reduce using rule 7 (E -> E DEP E .) ]
  ! DEP             [ shift and go to state 8 ]


state 15

    (6) E -> E NODEP E .
    (6) E -> E . NODEP E
    (7) E -> E . DEP E

    NODEP           reduce using rule 6 (E -> E NODEP E .)
    DEP             reduce using rule 6 (E -> E NODEP E .)
    $end            reduce using rule 6 (E -> E NODEP E .)
    RP              reduce using rule 6 (E -> E NODEP E .)
    COMMA           reduce using rule 6 (E -> E NODEP E .)

  ! NODEP           [ shift and go to state 9 ]
  ! DEP             [ shift and go to state 8 ]


state 16

    (4) LII -> LII COMMA . E
    (1) E -> . ID LP LII RP
    (2) E -> . ID ASSIGN E
    (3) E -> . STR
    (6) E -> . E NODEP E
    (7) E -> . E DEP E
    (8) E -> . LP E RP
    (9) E -> . ID

    ID              shift and go to state 2
    STR             shift and go to state 1
    LP              shift and go to state 3

    E                              shift and go to state 18

state 17

    (1) E -> ID LP LII RP .

    NODEP           reduce using rule 1 (E -> ID LP LII RP .)
    DEP             reduce using rule 1 (E -> ID LP LII RP .)
    $end            reduce using rule 1 (E -> ID LP LII RP .)
    RP              reduce using rule 1 (E -> ID LP LII RP .)
    COMMA           reduce using rule 1 (E -> ID LP LII RP .)


state 18

    (4) LII -> LII COMMA E .
    (6) E -> E . NODEP E
    (7) E -> E . DEP E

    RP              reduce using rule 4 (LII -> LII COMMA E .)
    COMMA           reduce using rule 4 (LII -> LII COMMA E .)
    NODEP           shift and go to state 9
    DEP             shift and go to state 8

